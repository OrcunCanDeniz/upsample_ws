import wandb
from pathlib import Path

class WandbArtifactHook:
    NAME = "WandbArtifactHook"
    
    def __init__(self, 
                    wandb_entity: str,
                    wandb_project: str,
                    dir_path: str = None):
        """ 
        Upload pth files generated by the most recent run to WandB. 
        Called after each training epoch. Only uploads files generated after the
        construction of this hook.
        
        wandb_entity: (str) WandB organization ,
        wandb_project: (str) WandB project name,
        dir_path: (str) Path to directory checkpoints are saved in. 
                If none runner.work_dir will be used
        """
        
        self.wandb_entity = wandb_entity
        self.wandb_project = wandb_project
        self.dir_path = dir_path
        self.file_pattern = "checkpoint-*.pth"
        self.files = {}
        self.wandb = None
        self.run = None
        self.run_id = None
        self.run_name = None
        self.logger = None
        self.artifact_name = None
                    
    def scan_files(self):
        files = {}
        for f in Path(self.dir_path).rglob(self.file_pattern):
            files[f.name] = f.stat().st_mtime
        return files
    
    def check_new_or_modified_files(self):
        new_files = []
        current_files = self.scan_files()
        for file_path, mtime in current_files.items():
            if file_path not in self.files or self.files[file_path] != mtime:
                new_files.append(file_path)
        self.files = current_files
        return new_files
    
    def log_wandb(self):
        assert self.wandb is not None, "[WandbArtifactHook] wandb object not initialized !"
        assert self.dir_path is not None, "[WandbArtifactHook] dir_path not set !"
        assert self.run is not None, "[WandbArtifactHook] WandB run not captured !"
        
        arti_files = self.check_new_or_modified_files()
        
        if len(arti_files) != 0:
            # Use a consistent artifact name for the entire run
            wandb_artifact = self.wandb.Artifact(
                    name=self.artifact_name, type='model')
            
            # Add metadata to the artifact
            wandb_artifact.metadata['run_name'] = self.run_name
            wandb_artifact.metadata['run_id'] = self.run_id
            wandb_artifact.metadata['file_count'] = len(arti_files)
            wandb_artifact.metadata['files'] = arti_files
            
            for filename in arti_files:
                local_filepath = Path(self.dir_path, filename)
                if self.logger:
                    self.logger.info(f"{self.NAME} will upload from: {local_filepath}")
                wandb_artifact.add_file(local_filepath)
            self.wandb.log_artifact(wandb_artifact)
            if self.logger:
                self.logger.info(f"{self.NAME} uploaded {len(arti_files)} checkpoint files as wandb artifact")
            
    def before_run(self, output_dir=None, logger=None):
        if self.dir_path is None:
            self.dir_path = output_dir
            
        self.wandb = wandb
        self.logger = logger

        if self.logger:
            self.logger.info(f"{self.NAME} initializing ...")
        
        # Use the existing wandb run if available, otherwise create a new one
        if wandb.run is not None:
            self.run = wandb.run
            self.run_id = self.run.id
            self.run_name = self.run.name
        else:
            self.run = self.wandb.init(entity=self.wandb_entity, project=self.wandb_project, resume=True)
            self.run_id = self.run.id
            self.run_name = self.run.name
        
        # Fixed artifact name tied to this run
        self.artifact_name = f'{self.run_id}_weights'
     
        self.files = self.scan_files()

        if self.logger:
            self.logger.info(f"{self.NAME} logging artifacts to run `{self.wandb_entity}/{self.wandb_project}/{self.run_name}` with Run ID `{self.run_id}`.")
        
        
    def after_train_epoch(self):
        self.log_wandb()