FROM ubuntu:24.04

# Environment variables to match the non-conda Dockerfile
ENV DEBIAN_FRONTEND=noninteractive
ENV CUDA_HOME=/opt/conda/envs/py38
ENV CUDA_PATH=$CUDA_HOME
ENV PATH=$CUDA_HOME/bin:$PATH
ENV LD_LIBRARY_PATH=""
ENV LD_LIBRARY_PATH=$CUDA_HOME/lib64:$LD_LIBRARY_PATH
ENV FORCE_CUDA=1
ENV TORCH_CUDA_ARCH_LIST="7.0;8.0;8.6"

# System dependencies (no system Python; we'll use conda)
RUN apt-get update && apt-get install -y \
    git wget curl \
    gcc-9 g++-9 make pkg-config \
    build-essential \
    libgl1 libglib2.0-0 libsm6 libxext6 \
    python3-tk tk-dev \
  && rm -rf /var/lib/apt/lists/*

# Install Miniconda
ENV CONDA_DIR=/opt/conda
RUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/conda.sh \
  && mkdir -p $CONDA_DIR \
  && bash /tmp/conda.sh -b -f -p $CONDA_DIR \
  && rm /tmp/conda.sh \
  && $CONDA_DIR/bin/conda clean -afy \
  && ln -s $CONDA_DIR/etc/profile.d/conda.sh /etc/profile.d/conda.sh

# Use bash login shell so conda is initialized
SHELL ["bash", "-lc"]

# Update conda and create Pythonâ€¯3.8 environment
RUN conda tos accept && \
    conda config --set ssl_verify false && \
    conda update -n base -c defaults conda \
      && conda create -y -n py38 python=3.8 \
      && conda clean -afy

RUN conda init 

# Inside py38: upgrade pip and install PyTorch+CUDA
RUN conda activate py38 && \
    python3 -m pip install --upgrade pip setuptools wheel && \
    conda config --set ssl_verify false && \
    conda install -y cudatoolkit-dev=11.3 -c conda-forge 

RUN conda activate py38 && \
    conda install -y -c conda-forge libxcrypt


# PyTorch 1.12.0 with CUDA 11.3 (same as main Dockerfile)
RUN conda activate py38 && \
    pip install torch==1.12.0+cu113 torchvision==0.13.0+cu113 torchaudio==0.12.0+cu113 \
    --extra-index-url https://download.pytorch.org/whl/cu113

# Python dependencies (use prebuilt wheels to avoid local CUDA builds)
RUN conda activate py38 && \
    pip install einops matplotlib Pillow tensorboardX \
               trimesh opencv-python pandas tqdm scipy wandb \
               scikit-learn tensorboard nuscenes-devkit \
               timm==0.6.12 && \
    pip install pytorch3d==0.7.2 \
      -f https://dl.fbaipublicfiles.com/pytorch3d/packaging/wheels/py38_cu113_pyt1120/download.html

# Skip chamfer_distance source build (requires nvcc); add later if needed

# OpenMIM and MM packages (match main Dockerfile)
RUN conda activate py38 && \
    pip install --no-cache-dir openmim==0.3.9 && \
    python -m mim install "mmcv-full==1.7.0" && \
    python -m mim install "mmdet==2.28.2" && \
    python -m mim install "mmsegmentation==0.30.0"

# mmdetection3d (same version and editable install)
RUN conda activate py38 && \
    git clone -b v1.0.0rc4 https://github.com/open-mmlab/mmdetection3d.git && \
    cd mmdetection3d && pip install -v -e .

# Pin pip then add remaining pins to match main Dockerfile
RUN conda activate py38 && \
    python -m pip install "pip<24.1" && \
    pip install numpy==1.23.5 llvmlite==0.39.1 numba==0.56.4 \
                pytorch-lightning==1.6.5 "pillow<10.0.0" open3d \
                git+https://github.com/otaheri/chamfer_distance numpy-quaternion
    

# Working directory
WORKDIR /workspace

ENV CC=/usr/bin/gcc-9 \
    CXX=/usr/bin/g++-9 \
    CUDAHOSTCXX=/usr/bin/g++-9 \
    LD=/usr/bin/ld

# put system bin first
ENV PATH=/usr/bin:$PATH

ENV LD_LIBRARY_PATH= \
    CONDA_BUILD_SYSROOT= \
    CFLAGS= \
    CXXFLAGS= \
    LDFLAGS= \
    NVCC_PREPEND_FLAGS= \
    TORCH_NVCC_FLAGS=


COPY ./BEVDepth /workspace/BEVDepth

RUN conda activate py38 && \
    cd /workspace/BEVDepth && \
    pip install -e .

RUN echo "conda activate py38" >> ~/.bashrc

# Entry point (same as main Dockerfile)
# COPY tulip/docker/entrypoint.sh /usr/local/bin/entrypoint.sh
# RUN chmod +x /usr/local/bin/entrypoint.sh
# ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/bin/bash"]